/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetAllCategories {\n  categories {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    section {\n      id\n      name\n    }\n    updatedAt\n  }\n}\n\nmutation AddCategory($name: String!, $section: String!) {\n  createCategory(createCategoryInput: {name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!, $section: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}": types.GetAllCategoriesDocument,
    "query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}": types.GetAllCredentialsDocument,
    "query GetAllGrades {\n  grades {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneGrade($id: Int!) {\n  grade(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}": types.GetAllGradesDocument,
    "mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nquery GetAdmins {\n  sections {\n    id\n    name\n  }\n}": types.LoginUserDocument,
    "query GetAllPositions {\n  positions {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOnePosition($id: Int!) {\n  position(id: $id) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n    updatedAt\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}": types.GetAllPositionsDocument,
    "query GetAllSections {\n  sections {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSection($id: Int!) {\n  section(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddSection($name: String!) {\n  createSection(createSectionInput: {name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSection($id: Int!, $name: String!) {\n  updateSection(updateSectionInput: {id: $id, name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSection($id: Int!) {\n  removeSection(id: $id) {\n    __typename\n  }\n}": types.GetAllSectionsDocument,
    "query GetAllSkills {\n  skills {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSkill($id: Int!) {\n  skill(id: $id) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AddSkill($name: String!, $description: String!, $shortName: String!) {\n  createSkill(\n    createSkillInput: {name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSkill($id: Int!, $name: String!, $description: String!, $shortName: String!) {\n  updateSkill(\n    updateSkillInput: {id: $id, name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSkill($id: Int!) {\n  removeSkill(id: $id) {\n    __typename\n  }\n}": types.GetAllSkillsDocument,
    "query GetAllTeams {\n  teams {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneTeam($id: Int!) {\n  team(id: $id) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    updatedAt\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}": types.GetAllTeamsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCategories {\n  categories {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    section {\n      id\n      name\n    }\n    updatedAt\n  }\n}\n\nmutation AddCategory($name: String!, $section: String!) {\n  createCategory(createCategoryInput: {name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!, $section: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllCategories {\n  categories {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneCategory($id: Int!) {\n  category(id: $id) {\n    id\n    name\n    section {\n      id\n      name\n    }\n    updatedAt\n  }\n}\n\nmutation AddCategory($name: String!, $section: String!) {\n  createCategory(createCategoryInput: {name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditCategory($id: Int!, $name: String!, $section: String!) {\n  updateCategory(updateCategoryInput: {id: $id, name: $name, section: $section}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteCategory($id: Int!) {\n  removeCategory(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllCredentials {\n  credentials {\n    id\n    username\n    roles\n  }\n}\n\nquery GetOneCredential($id: Int!) {\n  credential(id: $id) {\n    id\n    username\n    roles\n    categories {\n      name\n      id\n    }\n    team {\n      name\n      id\n    }\n  }\n}\n\nmutation AddCredential($name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  createCredential(\n    createCredentialInput: {username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation EditCredential($id: Int!, $name: String!, $categories: [String!]!, $team: String!, $password: String!, $roles: Roles!) {\n  updateCredential(\n    updateCredentialInput: {id: $id, username: $name, categories: $categories, team: $team, password: $password, roles: $roles}\n  ) {\n    id\n    username\n    roles\n  }\n}\n\nmutation DeleteCredential($id: Int!) {\n  removeCredential(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllGrades {\n  grades {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneGrade($id: Int!) {\n  grade(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllGrades {\n  grades {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneGrade($id: Int!) {\n  grade(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddGrade($name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  createGrade(\n    createGradeInput: {name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditGrade($id: Int!, $name: String!, $percentage: Int!, $pointGroup: Int!, $pointHouse: Int!, $pointSingle: Int!) {\n  updateGrade(\n    updateGradeInput: {id: $id, name: $name, percentage: $percentage, pointGroup: $pointGroup, pointHouse: $pointHouse, pointSingle: $pointSingle}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteGrade($id: Int!) {\n  removeGrade(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nquery GetAdmins {\n  sections {\n    id\n    name\n  }\n}"): (typeof documents)["mutation LoginUser($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    admin {\n      username\n      id\n      roles\n      categories {\n        id\n        name\n      }\n      team {\n        id\n        name\n      }\n    }\n    token\n  }\n}\n\nquery CheckLoggedIn {\n  checkLoggedIn {\n    username\n    id\n    roles\n    categories {\n      id\n      name\n    }\n    team {\n      id\n      name\n    }\n  }\n}\n\nquery GetAdmins {\n  sections {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllPositions {\n  positions {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOnePosition($id: Int!) {\n  position(id: $id) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n    updatedAt\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllPositions {\n  positions {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOnePosition($id: Int!) {\n  position(id: $id) {\n    id\n    name\n    value\n    pointGroup\n    pointSingle\n    pointHouse\n    updatedAt\n  }\n}\n\nmutation AddPosition($name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  createPosition(\n    createPositionInput: {name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditPosition($id: Int!, $name: String!, $pointGroup: Int!, $pointSingle: Int!, $pointHouse: Int!, $value: Int!) {\n  updatePosition(\n    updatePositionInput: {id: $id, name: $name, pointGroup: $pointGroup, pointSingle: $pointSingle, pointHouse: $pointHouse, value: $value}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeletePosition($id: Int!) {\n  removePosition(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllSections {\n  sections {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSection($id: Int!) {\n  section(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddSection($name: String!) {\n  createSection(createSectionInput: {name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSection($id: Int!, $name: String!) {\n  updateSection(updateSectionInput: {id: $id, name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSection($id: Int!) {\n  removeSection(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllSections {\n  sections {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSection($id: Int!) {\n  section(id: $id) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation AddSection($name: String!) {\n  createSection(createSectionInput: {name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSection($id: Int!, $name: String!) {\n  updateSection(updateSectionInput: {id: $id, name: $name}) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSection($id: Int!) {\n  removeSection(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllSkills {\n  skills {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSkill($id: Int!) {\n  skill(id: $id) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AddSkill($name: String!, $description: String!, $shortName: String!) {\n  createSkill(\n    createSkillInput: {name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSkill($id: Int!, $name: String!, $description: String!, $shortName: String!) {\n  updateSkill(\n    updateSkillInput: {id: $id, name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSkill($id: Int!) {\n  removeSkill(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllSkills {\n  skills {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneSkill($id: Int!) {\n  skill(id: $id) {\n    id\n    name\n    description\n    updatedAt\n  }\n}\n\nmutation AddSkill($name: String!, $description: String!, $shortName: String!) {\n  createSkill(\n    createSkillInput: {name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditSkill($id: Int!, $name: String!, $description: String!, $shortName: String!) {\n  updateSkill(\n    updateSkillInput: {id: $id, name: $name, description: $description, shortName: $shortName}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteSkill($id: Int!) {\n  removeSkill(id: $id) {\n    __typename\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllTeams {\n  teams {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneTeam($id: Int!) {\n  team(id: $id) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    updatedAt\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}"): (typeof documents)["query GetAllTeams {\n  teams {\n    id\n    name\n    updatedAt\n  }\n}\n\nquery GetOneTeam($id: Int!) {\n  team(id: $id) {\n    id\n    name\n    description\n    shortName\n    totalPoint\n    updatedAt\n  }\n}\n\nmutation AddTeam($name: String!, $description: String!, $shortName: String!, $color: String!) {\n  createTeam(\n    createTeamInput: {name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation EditTeam($id: Int!, $name: String!, $description: String!, $shortName: String!, $color: String!) {\n  updateTeam(\n    updateTeamInput: {id: $id, name: $name, description: $description, shortName: $shortName, color: $color}\n  ) {\n    id\n    name\n    updatedAt\n  }\n}\n\nmutation DeleteTeam($id: Int!) {\n  removeTeam(id: $id) {\n    __typename\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;